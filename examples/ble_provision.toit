// Copyright (C) 2023 Toitware ApS.
// Use of this source code is governed by a Zero-Clause BSD license that can
// be found in the tests/TESTS_LICENSE file.

// The standard BLE provision demo for configuring Wi-Fi AP SSID and password

import encoding.hex
import esp32
import provision

/**
Salt and verifier generated using the following command:
`python tools/esp_prov/esp_prov.py --transport ble --sec_ver 2 --sec2_gen_cred --sec2_username wifiprov --sec2_pwd abcd1234`
*/

SEC2-SALT ::= #[
  0x03, 0x6e, 0xe0, 0xc7, 0xbc, 0xb9, 0xed, 0xa8,
  0x4c, 0x9e, 0xac, 0x97, 0xd9, 0x3d, 0xec, 0xf4]

/** See $SEC2-SALT. */
SEC2-VERIFIER ::= #[
  0x7c, 0x7c, 0x85, 0x47, 0x65, 0x08, 0x94, 0x6d,
  0xd6, 0x36, 0xaf, 0x37, 0xd7, 0xe8, 0x91, 0x43,
  0x78, 0xcf, 0xfd, 0x61, 0x6c, 0x59, 0xd2, 0xf8,
  0x39, 0x08, 0x12, 0x72, 0x38, 0xde, 0x9e, 0x24,
  0xa4, 0x70, 0x26, 0x1c, 0xdf, 0xa9, 0x03, 0xc2,
  0xb2, 0x70, 0xe7, 0xb1, 0x32, 0x24, 0xda, 0x11,
  0x1d, 0x97, 0x18, 0xdc, 0x60, 0x72, 0x08, 0xcc,
  0x9a, 0xc9, 0x0c, 0x48, 0x27, 0xe2, 0xae, 0x89,
  0xaa, 0x16, 0x25, 0xb8, 0x04, 0xd2, 0x1a, 0x9b,
  0x3a, 0x8f, 0x37, 0xf6, 0xe4, 0x3a, 0x71, 0x2e,
  0xe1, 0x27, 0x86, 0x6e, 0xad, 0xce, 0x28, 0xff,
  0x54, 0x46, 0x60, 0x1f, 0xb9, 0x96, 0x87, 0xdc,
  0x57, 0x40, 0xa7, 0xd4, 0x6c, 0xc9, 0x77, 0x54,
  0xdc, 0x16, 0x82, 0xf0, 0xed, 0x35, 0x6a, 0xc4,
  0x70, 0xad, 0x3d, 0x90, 0xb5, 0x81, 0x94, 0x70,
  0xd7, 0xbc, 0x65, 0xb2, 0xd5, 0x18, 0xe0, 0x2e,
  0xc3, 0xa5, 0xf9, 0x68, 0xdd, 0x64, 0x7b, 0xb8,
  0xb7, 0x3c, 0x9c, 0xfc, 0x00, 0xd8, 0x71, 0x7e,
  0xb7, 0x9a, 0x7c, 0xb1, 0xb7, 0xc2, 0xc3, 0x18,
  0x34, 0x29, 0x32, 0x43, 0x3e, 0x00, 0x99, 0xe9,
  0x82, 0x94, 0xe3, 0xd8, 0x2a, 0xb0, 0x96, 0x29,
  0xb7, 0xdf, 0x0e, 0x5f, 0x08, 0x33, 0x40, 0x76,
  0x52, 0x91, 0x32, 0x00, 0x9f, 0x97, 0x2c, 0x89,
  0x6c, 0x39, 0x1e, 0xc8, 0x28, 0x05, 0x44, 0x17,
  0x3f, 0x68, 0x02, 0x8a, 0x9f, 0x44, 0x61, 0xd1,
  0xf5, 0xa1, 0x7e, 0x5a, 0x70, 0xd2, 0xc7, 0x23,
  0x81, 0xcb, 0x38, 0x68, 0xe4, 0x2c, 0x20, 0xbc,
  0x40, 0x57, 0x76, 0x17, 0xbd, 0x08, 0xb8, 0x96,
  0xbc, 0x26, 0xeb, 0x32, 0x46, 0x69, 0x35, 0x05,
  0x8c, 0x15, 0x70, 0xd9, 0x1b, 0xe9, 0xbe, 0xcc,
  0xa9, 0x38, 0xa6, 0x67, 0xf0, 0xad, 0x50, 0x13,
  0x19, 0x72, 0x64, 0xbf, 0x52, 0xc2, 0x34, 0xe2,
  0x1b, 0x11, 0x79, 0x74, 0x72, 0xbd, 0x34, 0x5b,
  0xb1, 0xe2, 0xfd, 0x66, 0x73, 0xfe, 0x71, 0x64,
  0x74, 0xd0, 0x4e, 0xbc, 0x51, 0x24, 0x19, 0x40,
  0x87, 0x0e, 0x92, 0x40, 0xe6, 0x21, 0xe7, 0x2d,
  0x4e, 0x37, 0x76, 0x2f, 0x2e, 0xe2, 0x68, 0xc7,
  0x89, 0xe8, 0x32, 0x13, 0x42, 0x06, 0x84, 0x84,
  0x53, 0x4a, 0xb3, 0x0c, 0x1b, 0x4c, 0x8d, 0x1c,
  0x51, 0x97, 0x19, 0xab, 0xae, 0x77, 0xff, 0xdb,
  0xec, 0xf0, 0x10, 0x95, 0x34, 0x33, 0x6b, 0xcb,
  0x3e, 0x84, 0x0f, 0xb9, 0xd8, 0x5f, 0xb8, 0xa0,
  0xb8, 0x55, 0x53, 0x3e, 0x70, 0xf7, 0x18, 0xf5,
  0xce, 0x7b, 0x4e, 0xbf, 0x27, 0xce, 0xce, 0xa8,
  0xb3, 0xbe, 0x40, 0xc5, 0xc5, 0x32, 0x29, 0x3e,
  0x71, 0x64, 0x9e, 0xde, 0x8c, 0xf6, 0x75, 0xa1,
  0xe6, 0xf6, 0x53, 0xc8, 0x31, 0xa8, 0x78, 0xde,
  0x50, 0x40, 0xf7, 0x62, 0xde, 0x36, 0xb2, 0xba]

USER-NAME ::= "wifiprov"
USER-KEY ::= "abcd1234"

main:
  id := esp32.mac-address[3..]
  service-name := "PROV_" + (hex.encode id)

  credentials := provision.SecurityCredentials
      --salt=SEC2-SALT
      --verifier=SEC2-VERIFIER

  prov := provision.Provision service-name --security-credentials=credentials

  prov.start

  note ::= """
      For a QR code open the following URL in a browser:

      https://espressif.github.io/esp-jumpstart/qrcode.html?data=\
      {"ver":"v1","name":"$(service-name)","transport":"ble","username":$USER-NAME,"pop":$USER-KEY}"""
  print note

  successful := prov.wait
  if successful:
    print "Provisioning is successful."

  prov.close
