// Code generated by protoc-gen-toit. DO NOT EDIT.
// source: session.proto

import protobuf as _protobuf
import core as _core
import .sec0-pb as _sec0
import .sec1-pb as _sec1
import .sec2-pb as _sec2

// ENUM START: SecSchemeVersion
SecSchemeVersion-SecScheme0/int/*enum<SecSchemeVersion>*/ ::= 0
SecSchemeVersion-SecScheme1/int/*enum<SecSchemeVersion>*/ ::= 1
SecSchemeVersion-SecScheme2/int/*enum<SecSchemeVersion>*/ ::= 2
// ENUM END: .SecSchemeVersion

// MESSAGE START: .SessionData
class SessionData extends _protobuf.Message:
  // ONEOF START: .SessionData.proto
  proto_ := null
  proto-oneof-case_/int? := null

  proto-oneof-clear -> none:
    proto_ = null
    proto-oneof-case_ = null

  static PROTO-SEC0/int ::= 10
  static PROTO-SEC1/int ::= 11
  static PROTO-SEC2/int ::= 12

  proto-oneof-case -> int?:
    return proto-oneof-case_

  proto-sec0 -> _sec0.Sec0Payload:
    return proto_

  proto-sec0= proto/_sec0.Sec0Payload -> none:
    proto_ = proto
    proto-oneof-case_ = PROTO-SEC0

  proto-sec1 -> _sec1.Sec1Payload:
    return proto_

  proto-sec1= proto/_sec1.Sec1Payload -> none:
    proto_ = proto
    proto-oneof-case_ = PROTO-SEC1

  proto-sec2 -> _sec2.Sec2Payload:
    return proto_

  proto-sec2= proto/_sec2.Sec2Payload -> none:
    proto_ = proto
    proto-oneof-case_ = PROTO-SEC2

  // ONEOF END: .SessionData.proto
  sec-ver/int/*enum<SecSchemeVersion>*/ := 0

  constructor
      --sec-ver/int?/*enum<SecSchemeVersion>?*/=null
      --proto-sec0/_sec0.Sec0Payload?=null
      --proto-sec1/_sec1.Sec1Payload?=null
      --proto-sec2/_sec2.Sec2Payload?=null:
    if sec-ver != null:
      this.sec-ver = sec-ver
    if proto-sec0 != null:
      this.proto-sec0 = proto-sec0
    if proto-sec1 != null:
      this.proto-sec1 = proto-sec1
    if proto-sec2 != null:
      this.proto-sec2 = proto-sec2

  constructor.deserialize r/_protobuf.Reader:
    r.read-message:
      r.read-field 2:
        sec-ver = r.read-primitive _protobuf.PROTOBUF-TYPE-ENUM
      r.read-field 10:
        proto-sec0 = _sec0.Sec0Payload.deserialize r
      r.read-field 11:
        proto-sec1 = _sec1.Sec1Payload.deserialize r
      r.read-field 12:
        proto-sec2 = _sec2.Sec2Payload.deserialize r

  serialize w/_protobuf.Writer --as-field/int?=null --oneof/bool=false -> none:
    w.write-message-header this --as-field=as-field --oneof=oneof
    w.write-primitive _protobuf.PROTOBUF-TYPE-ENUM sec-ver --as-field=2
    if proto-oneof-case_ == PROTO-SEC0:
      proto_.serialize w --as-field=PROTO-SEC0 --oneof
    if proto-oneof-case_ == PROTO-SEC1:
      proto_.serialize w --as-field=PROTO-SEC1 --oneof
    if proto-oneof-case_ == PROTO-SEC2:
      proto_.serialize w --as-field=PROTO-SEC2 --oneof

  num-fields-set -> int:
    return (proto-oneof-case_ == null ? 0 : 1)
      + (sec-ver == 0 ? 0 : 1)

  protobuf-size -> int:
    return (_protobuf.size-primitive _protobuf.PROTOBUF-TYPE-ENUM sec-ver --as-field=2)
      + (proto-oneof-case_ == PROTO-SEC0 ? (_protobuf.size-embedded-message (proto-sec0.protobuf-size) --as-field=10) : 0)
      + (proto-oneof-case_ == PROTO-SEC1 ? (_protobuf.size-embedded-message (proto-sec1.protobuf-size) --as-field=11) : 0)
      + (proto-oneof-case_ == PROTO-SEC2 ? (_protobuf.size-embedded-message (proto-sec2.protobuf-size) --as-field=12) : 0)

// MESSAGE END: .SessionData

