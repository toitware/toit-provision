// Code generated by protoc-gen-toit. DO NOT EDIT.
// source: sec2.proto

import protobuf as _protobuf
import core as _core
import .constants-pb as _constants

// ENUM START: Sec2MsgType
Sec2MsgType-S2Session-Command0/int/*enum<Sec2MsgType>*/ ::= 0
Sec2MsgType-S2Session-Response0/int/*enum<Sec2MsgType>*/ ::= 1
Sec2MsgType-S2Session-Command1/int/*enum<Sec2MsgType>*/ ::= 2
Sec2MsgType-S2Session-Response1/int/*enum<Sec2MsgType>*/ ::= 3
// ENUM END: .Sec2MsgType

// MESSAGE START: .S2SessionCmd0
class S2SessionCmd0 extends _protobuf.Message:
  client-username/ByteArray := ByteArray 0
  client-pubkey/ByteArray := ByteArray 0

  constructor
      --client-username/ByteArray?=null
      --client-pubkey/ByteArray?=null:
    if client-username != null:
      this.client-username = client-username
    if client-pubkey != null:
      this.client-pubkey = client-pubkey

  constructor.deserialize r/_protobuf.Reader:
    r.read-message:
      r.read-field 1:
        client-username = r.read-primitive _protobuf.PROTOBUF-TYPE-BYTES
      r.read-field 2:
        client-pubkey = r.read-primitive _protobuf.PROTOBUF-TYPE-BYTES

  serialize w/_protobuf.Writer --as-field/int?=null --oneof/bool=false -> none:
    w.write-message-header this --as-field=as-field --oneof=oneof
    w.write-primitive _protobuf.PROTOBUF-TYPE-BYTES client-username --as-field=1
    w.write-primitive _protobuf.PROTOBUF-TYPE-BYTES client-pubkey --as-field=2

  num-fields-set -> int:
    return (client-username.is-empty ? 0 : 1)
      + (client-pubkey.is-empty ? 0 : 1)

  protobuf-size -> int:
    return (_protobuf.size-primitive _protobuf.PROTOBUF-TYPE-BYTES client-username --as-field=1)
      + (_protobuf.size-primitive _protobuf.PROTOBUF-TYPE-BYTES client-pubkey --as-field=2)

// MESSAGE END: .S2SessionCmd0

// MESSAGE START: .S2SessionResp0
class S2SessionResp0 extends _protobuf.Message:
  status/int/*enum<_constants.Status>*/ := 0
  device-pubkey/ByteArray := ByteArray 0
  device-salt/ByteArray := ByteArray 0

  constructor
      --status/int?/*enum<_constants.Status>?*/=null
      --device-pubkey/ByteArray?=null
      --device-salt/ByteArray?=null:
    if status != null:
      this.status = status
    if device-pubkey != null:
      this.device-pubkey = device-pubkey
    if device-salt != null:
      this.device-salt = device-salt

  constructor.deserialize r/_protobuf.Reader:
    r.read-message:
      r.read-field 1:
        status = r.read-primitive _protobuf.PROTOBUF-TYPE-ENUM
      r.read-field 2:
        device-pubkey = r.read-primitive _protobuf.PROTOBUF-TYPE-BYTES
      r.read-field 3:
        device-salt = r.read-primitive _protobuf.PROTOBUF-TYPE-BYTES

  serialize w/_protobuf.Writer --as-field/int?=null --oneof/bool=false -> none:
    w.write-message-header this --as-field=as-field --oneof=oneof
    w.write-primitive _protobuf.PROTOBUF-TYPE-ENUM status --as-field=1
    w.write-primitive _protobuf.PROTOBUF-TYPE-BYTES device-pubkey --as-field=2
    w.write-primitive _protobuf.PROTOBUF-TYPE-BYTES device-salt --as-field=3

  num-fields-set -> int:
    return (status == 0 ? 0 : 1)
      + (device-pubkey.is-empty ? 0 : 1)
      + (device-salt.is-empty ? 0 : 1)

  protobuf-size -> int:
    return (_protobuf.size-primitive _protobuf.PROTOBUF-TYPE-ENUM status --as-field=1)
      + (_protobuf.size-primitive _protobuf.PROTOBUF-TYPE-BYTES device-pubkey --as-field=2)
      + (_protobuf.size-primitive _protobuf.PROTOBUF-TYPE-BYTES device-salt --as-field=3)

// MESSAGE END: .S2SessionResp0

// MESSAGE START: .S2SessionCmd1
class S2SessionCmd1 extends _protobuf.Message:
  client-proof/ByteArray := ByteArray 0

  constructor
      --client-proof/ByteArray?=null:
    if client-proof != null:
      this.client-proof = client-proof

  constructor.deserialize r/_protobuf.Reader:
    r.read-message:
      r.read-field 1:
        client-proof = r.read-primitive _protobuf.PROTOBUF-TYPE-BYTES

  serialize w/_protobuf.Writer --as-field/int?=null --oneof/bool=false -> none:
    w.write-message-header this --as-field=as-field --oneof=oneof
    w.write-primitive _protobuf.PROTOBUF-TYPE-BYTES client-proof --as-field=1

  num-fields-set -> int:
    return (client-proof.is-empty ? 0 : 1)

  protobuf-size -> int:
    return (_protobuf.size-primitive _protobuf.PROTOBUF-TYPE-BYTES client-proof --as-field=1)

// MESSAGE END: .S2SessionCmd1

// MESSAGE START: .S2SessionResp1
class S2SessionResp1 extends _protobuf.Message:
  status/int/*enum<_constants.Status>*/ := 0
  device-proof/ByteArray := ByteArray 0
  device-nonce/ByteArray := ByteArray 0

  constructor
      --status/int?/*enum<_constants.Status>?*/=null
      --device-proof/ByteArray?=null
      --device-nonce/ByteArray?=null:
    if status != null:
      this.status = status
    if device-proof != null:
      this.device-proof = device-proof
    if device-nonce != null:
      this.device-nonce = device-nonce

  constructor.deserialize r/_protobuf.Reader:
    r.read-message:
      r.read-field 1:
        status = r.read-primitive _protobuf.PROTOBUF-TYPE-ENUM
      r.read-field 2:
        device-proof = r.read-primitive _protobuf.PROTOBUF-TYPE-BYTES
      r.read-field 3:
        device-nonce = r.read-primitive _protobuf.PROTOBUF-TYPE-BYTES

  serialize w/_protobuf.Writer --as-field/int?=null --oneof/bool=false -> none:
    w.write-message-header this --as-field=as-field --oneof=oneof
    w.write-primitive _protobuf.PROTOBUF-TYPE-ENUM status --as-field=1
    w.write-primitive _protobuf.PROTOBUF-TYPE-BYTES device-proof --as-field=2
    w.write-primitive _protobuf.PROTOBUF-TYPE-BYTES device-nonce --as-field=3

  num-fields-set -> int:
    return (status == 0 ? 0 : 1)
      + (device-proof.is-empty ? 0 : 1)
      + (device-nonce.is-empty ? 0 : 1)

  protobuf-size -> int:
    return (_protobuf.size-primitive _protobuf.PROTOBUF-TYPE-ENUM status --as-field=1)
      + (_protobuf.size-primitive _protobuf.PROTOBUF-TYPE-BYTES device-proof --as-field=2)
      + (_protobuf.size-primitive _protobuf.PROTOBUF-TYPE-BYTES device-nonce --as-field=3)

// MESSAGE END: .S2SessionResp1

// MESSAGE START: .Sec2Payload
class Sec2Payload extends _protobuf.Message:
  // ONEOF START: .Sec2Payload.payload
  payload_ := null
  payload-oneof-case_/int? := null

  payload-oneof-clear -> none:
    payload_ = null
    payload-oneof-case_ = null

  static PAYLOAD-SC0/int ::= 20
  static PAYLOAD-SR0/int ::= 21
  static PAYLOAD-SC1/int ::= 22
  static PAYLOAD-SR1/int ::= 23

  payload-oneof-case -> int?:
    return payload-oneof-case_

  payload-sc0 -> S2SessionCmd0:
    return payload_

  payload-sc0= payload/S2SessionCmd0 -> none:
    payload_ = payload
    payload-oneof-case_ = PAYLOAD-SC0

  payload-sr0 -> S2SessionResp0:
    return payload_

  payload-sr0= payload/S2SessionResp0 -> none:
    payload_ = payload
    payload-oneof-case_ = PAYLOAD-SR0

  payload-sc1 -> S2SessionCmd1:
    return payload_

  payload-sc1= payload/S2SessionCmd1 -> none:
    payload_ = payload
    payload-oneof-case_ = PAYLOAD-SC1

  payload-sr1 -> S2SessionResp1:
    return payload_

  payload-sr1= payload/S2SessionResp1 -> none:
    payload_ = payload
    payload-oneof-case_ = PAYLOAD-SR1

  // ONEOF END: .Sec2Payload.payload
  msg/int/*enum<Sec2MsgType>*/ := 0

  constructor
      --msg/int?/*enum<Sec2MsgType>?*/=null
      --payload-sc0/S2SessionCmd0?=null
      --payload-sr0/S2SessionResp0?=null
      --payload-sc1/S2SessionCmd1?=null
      --payload-sr1/S2SessionResp1?=null:
    if msg != null:
      this.msg = msg
    if payload-sc0 != null:
      this.payload-sc0 = payload-sc0
    if payload-sr0 != null:
      this.payload-sr0 = payload-sr0
    if payload-sc1 != null:
      this.payload-sc1 = payload-sc1
    if payload-sr1 != null:
      this.payload-sr1 = payload-sr1

  constructor.deserialize r/_protobuf.Reader:
    r.read-message:
      r.read-field 1:
        msg = r.read-primitive _protobuf.PROTOBUF-TYPE-ENUM
      r.read-field 20:
        payload-sc0 = S2SessionCmd0.deserialize r
      r.read-field 21:
        payload-sr0 = S2SessionResp0.deserialize r
      r.read-field 22:
        payload-sc1 = S2SessionCmd1.deserialize r
      r.read-field 23:
        payload-sr1 = S2SessionResp1.deserialize r

  serialize w/_protobuf.Writer --as-field/int?=null --oneof/bool=false -> none:
    w.write-message-header this --as-field=as-field --oneof=oneof
    w.write-primitive _protobuf.PROTOBUF-TYPE-ENUM msg --as-field=1
    if payload-oneof-case_ == PAYLOAD-SC0:
      payload_.serialize w --as-field=PAYLOAD-SC0 --oneof
    if payload-oneof-case_ == PAYLOAD-SR0:
      payload_.serialize w --as-field=PAYLOAD-SR0 --oneof
    if payload-oneof-case_ == PAYLOAD-SC1:
      payload_.serialize w --as-field=PAYLOAD-SC1 --oneof
    if payload-oneof-case_ == PAYLOAD-SR1:
      payload_.serialize w --as-field=PAYLOAD-SR1 --oneof

  num-fields-set -> int:
    return (payload-oneof-case_ == null ? 0 : 1)
      + (msg == 0 ? 0 : 1)

  protobuf-size -> int:
    return (_protobuf.size-primitive _protobuf.PROTOBUF-TYPE-ENUM msg --as-field=1)
      + (payload-oneof-case_ == PAYLOAD-SC0 ? (_protobuf.size-embedded-message (payload-sc0.protobuf-size) --as-field=20) : 0)
      + (payload-oneof-case_ == PAYLOAD-SR0 ? (_protobuf.size-embedded-message (payload-sr0.protobuf-size) --as-field=21) : 0)
      + (payload-oneof-case_ == PAYLOAD-SC1 ? (_protobuf.size-embedded-message (payload-sc1.protobuf-size) --as-field=22) : 0)
      + (payload-oneof-case_ == PAYLOAD-SR1 ? (_protobuf.size-embedded-message (payload-sr1.protobuf-size) --as-field=23) : 0)

// MESSAGE END: .Sec2Payload

